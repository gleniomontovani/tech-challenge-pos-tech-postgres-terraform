name: Database Migration

on:
  # push:
  #   branches:
  #     - main
  pull_request:
    branches:
      - main

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest

    env:
      TF_VAR_postgres_username: ${{ secrets.POSTGRES_USERNAME }}
      TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
      TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check  

      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init

      - name: Plan Terraform
        run: |
          cd terraform
          terraform plan -out=tfplan
            
      - name: Apply Terraform
        id: terraform_apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan | tee output.txt || if grep -q "DBInstanceAlreadyExists" output.txt; then echo "Database already exists, skipping creation."; fi

      - name: Persist PostgreSQL Endpoint
        run: |
          echo "POSTGRES_ENDPOINT=$(terraform output -raw postgres_db_endpoint)" >> postgres_endpoint.txt

      - name: Show Output
        run: |
          cat postgres_endpoint.txt

